/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package application;

import java.io.IOException;
import events.ClientServerConnectionMessageEvent;
import net.Client;
import listeners.ClientServerConnectionMessageListener;

/**
 *
 * @author Paul
 */
public class ClientPresentation extends javax.swing.JFrame implements ClientServerConnectionMessageListener {

    private Client clientServer;
    private boolean connected = false;
    private String defaultName = "serverClient";

    /**
     * Creates new form ServerPresentation
     */
    public ClientPresentation() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnConnectToServer = new javax.swing.JToggleButton();
        inputPort = new java.awt.TextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMensajes = new javax.swing.JTextArea();
        inputHostname = new java.awt.TextField();
        inputName = new java.awt.TextField();
        inputMessage = new java.awt.TextField();
        btnEnviar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CLIENTE");

        btnConnectToServer.setText("ON");
        btnConnectToServer.setName(""); // NOI18N
        btnConnectToServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectToServerActionPerformed(evt);
            }
        });

        inputPort.setText("9090");

        txtMensajes.setColumns(20);
        txtMensajes.setRows(5);
        jScrollPane2.setViewportView(txtMensajes);

        inputHostname.setText("127.0.0.1");

        inputName.setText("Name");
        inputName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputNameActionPerformed(evt);
            }
        });

        inputMessage.setText("Message");

        btnEnviar.setText("Send");
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(inputPort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(inputHostname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnConnectToServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(inputName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
            .addComponent(inputMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnEnviar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(inputPort, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(inputHostname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(inputName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEnviar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                .addComponent(btnConnectToServer, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectToServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectToServerActionPerformed
        // TODO add your handling code here:
        String hostname = inputHostname.getText();
        if (hostname.isEmpty()) {
            inputHostname.setText("Llena este campo");
            return;
        }

        if (inputPort.getText().isEmpty()) {
            inputPort.setText("Rellena este campo con un puerto");
            return;
        }

        int port = 9090;
        try {
            port = Integer.parseInt(inputPort.getText());
        } catch (NumberFormatException e) {
            inputPort.setText("Rellena este campo con un nuevo");
            return;
        }

        if (!connected) {
            connectToServer(hostname, port);
        } else {
            disconnectFromServer();
        }

    }//GEN-LAST:event_btnConnectToServerActionPerformed

    private void inputNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputNameActionPerformed

    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        try {
            if (!inputMessage.getText().isEmpty()) {
                clientServer.sendMessage(inputMessage.getText());
            }
        } catch (IOException ex) {
            handleException(ex);
            appendMessage("No se pudo enviar el mensaje");
        }
    }//GEN-LAST:event_btnEnviarActionPerformed

    private void connectToServer(String hostname, int port) {
        try {
            String username = inputName.getText().isEmpty() ? defaultName : inputName.getText();
            if (clientServer == null) {
                clientServer = new Client(hostname, port, username);
            }
            clientServer.connect();
            clientServer.addSimpleMessageListener(this);
            appendMessage("Cliente iniciado");
            changeControlsStates(true);
        } catch (IOException ex) {
            handleException(ex);
            appendMessage("El cliente no puede iniciar");
            changeControlsStates(false);
        }

    }

    private void disconnectFromServer() {
        try {
            clientServer.disconnect();
            clientServer.removeFromMessageListener(this);
            appendMessage("cliente finalizado");
            changeControlsStates(false);
        } catch (IOException ex) {
            handleException(ex);
            appendMessage("El cliente no puede finalizar");
            changeControlsStates(true);
        }
    }

    private void changeControlsStates(boolean connectedSuccess) {
        if (connectedSuccess) {
            btnConnectToServer.setText("OFF");
            this.connected = true;
            btnConnectToServer.setSelected(true);
        } else {
            btnConnectToServer.setText("ON");
            btnConnectToServer.setSelected(false);
            this.connected = false;
        }
    }

    private void handleException(Exception ex) {
        ex.printStackTrace();
        //System.out.println(ConsoleColors.RED_BOLD + "Error : " + ex.getMessage());
    }

    private void appendMessage(String message) {
        txtMensajes.setText(txtMensajes.getText() + "\n" + message);

    }

    @Override
    public void onNewMessage(ClientServerConnectionMessageEvent event) {
        String message = (String) event.getSource();
        appendMessage(message);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientPresentation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientPresentation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientPresentation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientPresentation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientPresentation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnConnectToServer;
    private javax.swing.JButton btnEnviar;
    private java.awt.TextField inputHostname;
    private java.awt.TextField inputMessage;
    private java.awt.TextField inputName;
    private java.awt.TextField inputPort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtMensajes;
    // End of variables declaration//GEN-END:variables

}
