/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package application.presentation;

import java.io.IOException;
import server.events.ClientServerConnectionMessageEvent;
import server.helpers.ConsoleColors;
import server.net.Server;
import server.listeners.ClientServerConnectionMessageListener;

/**
 *
 * @author Paul
 */
public class ServerPresentation extends javax.swing.JFrame implements ClientServerConnectionMessageListener {

    private Server server;
    private boolean connected = false;

    /**
     * Creates new form ServerPresentation
     */
    public ServerPresentation() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnInitServer = new javax.swing.JToggleButton();
        inputPort = new java.awt.TextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMensajes = new javax.swing.JTextArea();
        inputHostname = new java.awt.TextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SERVIDOR");

        btnInitServer.setText("ON");
        btnInitServer.setName(""); // NOI18N
        btnInitServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInitServerActionPerformed(evt);
            }
        });

        inputPort.setText("9090");

        txtMensajes.setColumns(20);
        txtMensajes.setRows(5);
        jScrollPane2.setViewportView(txtMensajes);

        inputHostname.setText("127.0.0.1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnInitServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(inputPort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
            .addComponent(inputHostname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnInitServer, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputPort, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(inputHostname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInitServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInitServerActionPerformed
        // TODO add your handling code here:
        String hostname = inputHostname.getText();
        if (hostname.isEmpty()) {
            inputHostname.setText("Llena este campo");
            return;
        }
        if (inputPort.getText().isEmpty()) {
            inputPort.setText("Rellena este campo con un puerto");
            return;
        }

        int port = 9090;
        try {
            port = Integer.parseInt(inputPort.getText());
        } catch (NumberFormatException e) {
            inputPort.setText("Rellena este campo con un nuevo");
            return;
        }

        if (!connected) {
            connectServer(hostname, port);
        } else {
            disconnectServer();
        }

    }//GEN-LAST:event_btnInitServerActionPerformed

    public void changeControlsStates(boolean connectedSuccess) {
        if (connectedSuccess) {
            btnInitServer.setText("OFF");
            this.connected = true;
            btnInitServer.setSelected(true);
        } else {
            btnInitServer.setText("ON");
            btnInitServer.setSelected(false);
            this.connected = false;
        }

    }

    private void connectServer(String hostname, int port) {
        try {

            if (server == null) {
                server = new Server(hostname, port);
            }
            server.connect();
            server.addSimpleMessageListener(this);
            appendMessage("Servidor iniciado");
            changeControlsStates(true);
        } catch (IOException ex) {
            handleException(ex);
            appendMessage("El servidor no puede iniciar");
            changeControlsStates(false);
        }

    }

    private void disconnectServer() {
        try {
            server.disconnect();
            server.removeFromMessageListener(this);
            appendMessage("Servidor finalizado");
            changeControlsStates(false);
        } catch (Exception ex) {
            handleException(ex);
            appendMessage("El servidor no puede finalizar");
            changeControlsStates(true);
        }
    }

    private void appendMessage(String message) {
        txtMensajes.setText(txtMensajes.getText() + "\n" + message);

    }

    @Override
    public void onNewMessage(ClientServerConnectionMessageEvent event) {
        String message = (String) event.getSource();
        appendMessage(message);
    }

    private void handleException(Exception ex) {

        System.out.println(ConsoleColors.RED_BOLD + "Error : " + ex.getMessage());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerPresentation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerPresentation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerPresentation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerPresentation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerPresentation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnInitServer;
    private java.awt.TextField inputHostname;
    private java.awt.TextField inputPort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtMensajes;
    // End of variables declaration//GEN-END:variables

}
